<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from emcee.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="emcee" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <material name="dark_grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="light_grey">
    <color rgba="0.4 0.4 0.4 1.0"/>
  </material>
  <material name="stl">
    <color rgba="0.8 0.8 0.0 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.95 0.26 0.21 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.15 0.15 0.15 1.0"/>
  </material>
  <material name="green">
    <color rgba="0 1 0 1"/>
  </material>
  <link name="left_front_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- <mesh filename="package://emcee_description/meshes/visual/wheel.dae"/> -->
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
    </collision>
    <inertial>
      <!-- <origin xyz="0.032464 0 0" rpy="0 0 0"/> -->
      <origin rpy="1.57079632679 0 1.57079632679" xyz="0 0 0"/>
      <!-- <mass value="1" /> -->
      <mass value="8.6"/>
      <!-- moment of inertia of a cylinder https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors -->
      <inertia ixx="0.0785782304" ixy="0" ixz="0" iyy="0.0785782304" iyz="0" izz="0.1051404359"/>
      <!-- <inertia
          ixx="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" ixy="0" ixz="0"
          iyy="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" iyz="0"
          izz="${0.5*8.6*wheel_radius}"/> -->
    </inertial>
  </link>
  <gazebo reference="left_front_wheel_link">
    <!-- TODO: set these constants. They are just taken from urdf_tutorial. 09 -->
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <minDepth>0.00</minDepth>
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <joint name="left_front_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="left_front_wheel_link"/>
    <origin rpy="0 0 0" xyz="0.32245 0.2548 -0.0762"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- TODO: figure out what these are for -->
  <transmission name="left_front_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_front_wheel">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_front_actuator">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="left_rear_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- <mesh filename="package://emcee_description/meshes/visual/wheel.dae"/> -->
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
    </collision>
    <inertial>
      <!-- <origin xyz="0.032464 0 0" rpy="0 0 0"/> -->
      <origin rpy="1.57079632679 0 1.57079632679" xyz="0 0 0"/>
      <!-- <mass value="1" /> -->
      <mass value="8.6"/>
      <!-- moment of inertia of a cylinder https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors -->
      <inertia ixx="0.0785782304" ixy="0" ixz="0" iyy="0.0785782304" iyz="0" izz="0.1051404359"/>
      <!-- <inertia
          ixx="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" ixy="0" ixz="0"
          iyy="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" iyz="0"
          izz="${0.5*8.6*wheel_radius}"/> -->
    </inertial>
  </link>
  <gazebo reference="left_rear_wheel_link">
    <!-- TODO: set these constants. They are just taken from urdf_tutorial. 09 -->
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <minDepth>0.00</minDepth>
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <joint name="left_rear_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="left_rear_wheel_link"/>
    <origin rpy="0 0 0" xyz="-0.1478 0.2548 -0.0762"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- TODO: figure out what these are for -->
  <transmission name="left_rear_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_rear_wheel">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_rear_actuator">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="right_front_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- <mesh filename="package://emcee_description/meshes/visual/wheel.dae"/> -->
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
    </collision>
    <inertial>
      <!-- <origin xyz="0.032464 0 0" rpy="0 0 0"/> -->
      <origin rpy="1.57079632679 0 1.57079632679" xyz="0 0 0"/>
      <!-- <mass value="1" /> -->
      <mass value="8.6"/>
      <!-- moment of inertia of a cylinder https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors -->
      <inertia ixx="0.0785782304" ixy="0" ixz="0" iyy="0.0785782304" iyz="0" izz="0.1051404359"/>
      <!-- <inertia
          ixx="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" ixy="0" ixz="0"
          iyy="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" iyz="0"
          izz="${0.5*8.6*wheel_radius}"/> -->
    </inertial>
  </link>
  <gazebo reference="right_front_wheel_link">
    <!-- TODO: set these constants. They are just taken from urdf_tutorial. 09 -->
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <minDepth>0.00</minDepth>
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <joint name="right_front_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="right_front_wheel_link"/>
    <origin rpy="3.14159265359 0 0" xyz="0.32245 -0.2548 -0.0762"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- TODO: figure out what these are for -->
  <transmission name="right_front_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_front_wheel">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_front_actuator">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="right_rear_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- <mesh filename="package://emcee_description/meshes/visual/wheel.dae"/> -->
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1905" radius="0.156369"/>
      </geometry>
    </collision>
    <inertial>
      <!-- <origin xyz="0.032464 0 0" rpy="0 0 0"/> -->
      <origin rpy="1.57079632679 0 1.57079632679" xyz="0 0 0"/>
      <!-- <mass value="1" /> -->
      <mass value="8.6"/>
      <!-- moment of inertia of a cylinder https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors -->
      <inertia ixx="0.0785782304" ixy="0" ixz="0" iyy="0.0785782304" iyz="0" izz="0.1051404359"/>
      <!-- <inertia
          ixx="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" ixy="0" ixz="0"
          iyy="${(1.0/12.0)*8.6*(3*wheel_radius**2 + wheel_width**2)}" iyz="0"
          izz="${0.5*8.6*wheel_radius}"/> -->
    </inertial>
  </link>
  <gazebo reference="right_rear_wheel_link">
    <!-- TODO: set these constants. They are just taken from urdf_tutorial. 09 -->
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <minDepth>0.00</minDepth>
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <joint name="right_rear_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="right_rear_wheel_link"/>
    <origin rpy="3.14159265359 0 0" xyz="-0.1478 -0.2548 -0.0762"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- TODO: figure out what these are for -->
  <transmission name="right_rear_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_rear_wheel">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_rear_actuator">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="base_link"/>
  <joint name="chassis_base_joiint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
    <origin xyz="0 0 0.232569"/>
  </joint>
  <link name="chassis">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/chassis.dae"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="0.03 0 0"/>
      <geometry>
        <box size="0.81 0.3191 0.24765"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0.1 0 0"/>
      <!-- <origin xyz="0.39809 0.40556 0.64213" rpy="0 0 0" /> -->
      <!-- <mass value="1" /> -->
      <mass value="18.65"/>
      <inertia ixx="0.541922" ixy="2.8e-5" ixz="-0.01424" iyy="1.50291" iyz="0.000144" izz="1.71709"/>
    </inertial>
  </link>
  <link name="sled">
    <visual>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/sled.dae"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="green"/>
    </visual>
    <collision>
      <origin xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/collision/sled_simple.dae"/>
        <!-- <box size="${sled_width} ${sled_length} ${sled_height}"/> -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <origin xyz="0.2882 0.052765 0.007624" rpy="0 0 0" /> -->
      <!-- <mass value="1" /> -->
      <mass value="12.25"/>
      <inertia ixx="0.225942" ixy="-5.6e-5" ixz="0.041831" iyy="0.162776" iyz="4.5e-5" izz="0.312502"/>
    </inertial>
  </link>
  <joint name="sled_joint" type="prismatic">
    <parent link="chassis"/>
    <child link="sled"/>
    <axis rpy="0 0 0" xyz="1 0 0"/>
    <limit effort="1000" lower="-0.204975" upper="0.103375" velocity="0.5"/>
    <origin rpy="0 0 0" xyz="0 0 0.163825"/>
  </joint>
  <link name="sensor_post">
    <visual>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/sensor_post.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 0"/>
      <geometry>
        <box size="0.0254 0.0508 0.3048"/>
      </geometry>
    </collision>
    <inertial>
      <!-- xyz = 0.1365 0.11018 0.25799 -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <mass value="1"/> -->
      <mass value="0.421686"/>
      <inertia ixx="0.003291" ixy="-2e-6" ixz="0" iyy="0.00014" iyz="0" izz="0.003203"/>
    </inertial>
  </link>
  <joint name="sensor_post_joint" type="fixed">
    <parent link="sled"/>
    <child link="sensor_post"/>
    <origin rpy="0 0 0" xyz="0.20955 0 0.168275"/>
  </joint>
  <link name="ir_camera">
    <visual>
      <geometry>
        <box size="0.007 0.130 0.020"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.007 0.130 0.020"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="1e-09" ixy="0" ixz="0" iyy="1e-09" iyz="0" izz="1e-09"/>
    </inertial>
  </link>
  <joint name="ir_camera_joint" type="fixed">
    <parent link="sensor_post"/>
    <child link="ir_camera"/>
    <!-- TODO: get exact position -->
    <origin rpy="0 0 0" xyz="0.015 0 .07"/>
  </joint>
  <!-- TODO: fix joints -->
  <link name="laser">
    <visual>
      <origin xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/laser.dae"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0"/>
      <geometry>
        <box size="0.08 0.1 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <!-- xyz = "0.13726 0.267092 0.257687" -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <mass value="1"/> -->
      <mass value="0.193569"/>
      <inertia ixx="0.00021" ixy="1.4e-5" ixz="1e-6" iyy="0.000203" iyz="0" izz="0.00017"/>
    </inertial>
  </link>
  <!-- <joint name="laser_joint" type="revolute">
  	<parent link="sensor_post" />
  	<child link="laser" />
  	<origin xyz="0 0 ${(sensor_mount_height/2)}" rpy="0 0 3.14159" />
  	<axis xyz="0 1 0" />
  	<limit lower="-0.7853975" upper="0" effort="1000" velocity="1" />
  </joint> -->
  <joint name="laser_joint" type="fixed">
    <parent link="sensor_post"/>
    <child link="laser"/>
    <origin rpy="0 0 3.14159" xyz="0 0 0.1524"/>
  </joint>
  <link name="arm">
    <visual>
      <origin xyz="0.01 -.01 .02"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/arms.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0.01 -.01 .02"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/collision/arms_simple.dae"/>
      </geometry>
    </collision>
    <inertial>
      <!-- xyz="-0.024425 0.120927 -0.01018" -->
      <origin rpy="0 0 0" xyz="0.4 0 0"/>
      <!-- <mass value="1"/> -->
      <mass value="6.14067"/>
      <inertia ixx="0.581471" ixy="-6.6e-5" ixz="-3e-6" iyy="0.39687" iyz="-0.128097" izz="0.87075"/>
    </inertial>
  </link>
  <!-- .236 -->
  <joint name="arm_joint" type="revolute">
    <parent link="sled"/>
    <child link="arm"/>
    <origin xyz="-0.236 0 0.276325"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000" lower="-0.253177" upper="0.30918" velocity="1"/>
  </joint>
  <link name="bucket">
    <visual>
      <origin xyz="0.00 0 0.00"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/visual/bucket.dae"/>
        
        /&gt;
      
      </geometry>
    </visual>
    <collision>
      <origin xyz="0.00 0 0.00"/>
      <geometry>
        <mesh filename="package://emcee_description/meshes/collision/bucket_simple.dae"/>
      </geometry>
    </collision>
    <inertial>
      <!-- xyz="-0.304153 0.030822 -0.01735" -->
      <origin rpy="0 0 0" xyz="0.15 0 0.05"/>
      <!-- <mass value="1"/> -->
      <mass value="3.92566"/>
      <inertia ixx="0.216901" ixy="0" ixz="-0.007835" iyy="0.042509" iyz="0" izz="0.243738"/>
    </inertial>
  </link>
  <joint name="bucket_joint" type="revolute">
    <parent link="arm"/>
    <child link="bucket"/>
    <axis xyz="0 1 0"/>
    <origin xyz=".965 0 -0.282"/>
    <limit effort="1000" lower="-0.4" upper="1.570795" velocity="1"/>
  </joint>
  <!-- TODO: This is from the copy and paste: Make this internal_imu_link or something, and use a mixed-in xacro
       to supply the joint between it and imu_link. This is important so that imu_link
       always points to the "active" IMU. When an upgrade IMU is connected, the
       internal_imu_link should remain, but imu_link should point to the upgrade one. -->
  <link name="imu_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1e-09" ixy="0.0" ixz="0.0" iyy="1e-09" iyz="0.0" izz="1e-09"/>
    </inertial>
  </link>
  <joint name="imu_joint" type="fixed">
    <parent link="chassis"/>
    <child link="imu_link"/>
  </joint>
  <!-- ros_control plugin -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
  <!-- links -->
  <gazebo reference="chassis">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="sled">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="sensor_post">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="laser">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="arm">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="ir_camera">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="imu_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <!-- lidar -->
  <gazebo reference="laser">
    <sensor name="laser_sensor" type="gpu_ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>4000</samples>
            <resolution>0.9</resolution>
            <min_angle>-3.1415926</min_angle>
            <max_angle>3.1415926</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.15</min>
          <max>6.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
             achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
             stddev of 0.01m will put 99.7% of samples within 0.03m of the true
             reading. -->
          <mean>0.0</mean>
          <stddev>0.05</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_gpu_laser.so" name="gazebo_ros_head_hokuyo_controller">
        <topicName>/emcee/laser/scan</topicName>
        <frameName>laser</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libhector_gazebo_ros_imu.so" name="imu_controller">
      <robotNamespace>/</robotNamespace>
      <updateRate>50.0</updateRate>
      <bodyName>imu_link</bodyName>
      <topicName>imu/data</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.005 0.005 0.005 </rateDrift>
      <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>
  <!-- camera -->
  <!-- TODO: try to get the openni plugin working. This is currently a standard camera. -->
  <gazebo reference="ir_camera">
    <update_rate>30.0</update_rate>
    <sensor name="camera1" type="camera">
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>emcee/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- <gazebo>
  <plugin name="ir_camera_controller" filename="libgazebo_ros_openni_kinect.so">
    <baseline>0.2</baseline>
    <alwaysOn>true</alwaysOn>
    <updateRate>1.0</updateRate>
    <cameraName>camera1_ir</cameraName>
    <imageTopicName>/camera1/depth/image_raw</imageTopicName>
    <cameraInfoTopicName>/camera1/depth/camera_info</cameraInfoTopicName>
    <depthImageTopicName>/camera1/depth/image_raw</depthImageTopicName>
    <depthImageInfoTopicName>/camera1/depth/camera_info</depthImageInfoTopicName>
    <pointCloudTopicName>/camera1/depth/points</pointCloudTopicName>
    <frameName>ir_camera</frameName>
    <pointCloudCutoff>0.5</pointCloudCutoff>
    <distortionK1>0.00000001</distortionK1>
    <distortionK2>0.00000001</distortionK2>
    <distortionK3>0.00000001</distortionK3>
    <distortionT1>0.00000001</distortionT1>
    <distortionT2>0.00000001</distortionT2>
    <CxPrime>0</CxPrime>
    <Cx>0</Cx>
    <Cy>0</Cy>
    <focalLength>0</focalLength>
    <hackBaseline>0</hackBaseline>
  </plugin>
</gazebo> -->
  <!-- <gazebo>
  <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
    <updateRate>100.0</updateRate>
    <robotNamespace>/emcee</robotNamespace>
    <leftFrontJoint>left_front_wheel</leftFrontJoint>
    <rightFrontJoint>right_front_wheel</rightFrontJoint>
    <leftRearJoint>left_rear_wheel</leftRearJoint>
    <rightRearJoint>right_rear_wheel</rightRearJoint>
    <wheelDiameter>${2*wheel_radius}</wheelDiameter>
    <robotBaseFrame>base_link</robotBaseFrame>
    <torque>20</torque>
    <topicName>cmd_vel</topicName>
    <broadcastTF>true</broadcastTF>
  </plugin>
</gazebo> -->
  <!-- wheel transmissions are done within the wheel macro. -->
  <!-- <xacro:include filename="emcee.transmission" /> -->
  <transmission name="sled_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="sled_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="sled_linear_actuator">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="arm_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="arm_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="arm_linear_actuators">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="bucket_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="bucket_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="bucket_linear_actuator">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
</robot>
<!-- TODO: scale up the collision DAEs.  When I reduced the triangle count (complexity), the size of the shapes dimished.
The collisions should be bigger than reality.  Scale them up in Blender (s command) but so they still fit. -->
<!-- TODO: add macros to replace hard coded values -->
<!-- TODO: transmission tags -->

